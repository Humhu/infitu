<launch>

<!-- <node pkg="relearn_reconfig" type="test_laser.py" name="learner" output="screen">
    <remap from="scan" to="scan_throttled"/>
    <remap from="reward" to="ape/reward"/>
    <remap from="action" to="lo_interface/normalized_parameters"/>
    <remap from="belief" to="belief_state/stream_raw"/>
    <remap from="breaks" to="terminator/breaks"/>
    <rosparam>
        laser_dim: 681
        belief_dim: 9
        action_dim: 9

        laser_nan_value: -1
        laser_inf_value: 5.6

        dt: 3.0
        lag: 1.0
        time_tolerance: 0.1
        belief_dt_tol: 0.1
        spin_rate: 1.0

        save_path: /home/humphreh/Software/argus_ws/lo_slow_3.pkl

        enable_painting: true
        laser_fov: [-2.0943951, 2.0943951]
        laser_max_range: 5.5
        painting_resolution: 0.1
    </rosparam>
</node> -->

<node pkg="infi_learn" type="laser_embedding_learner.py" name="embedding" output="screen">
    <remap from="scan" to="scan_throttled"/>
    <remap from="reward" to="ape/reward"/>
    <remap from="action" to="lo_interface/normalized_parameters"/>
    <remap from="belief" to="belief_state/stream_raw"/>
    <remap from="breaks" to="terminator/breaks"/>
    <rosparam>
        frontend:
            laser_dim: 681
            belief_dim: 9
            action_dim: 9

            laser_nan_value: -1
            laser_inf_value: 5.6

            dt: 3.0
            lag: 1.0
            time_tolerance: 0.1
            belief_dt_tol: 0.1


            laser_fov: [-2.0943951, 2.0943951]
            laser_max_range: 5.5
            laser_paint_resolution: 0.1

        backend:
            save_path: /home/humphreh/Software/argus_ws/lo_test.pkl
            online_validation_rate: 0.05

        spin_rate: 1.0

        learning:
            separation_distance: 0.5
            batch_size: 10
            iters_per_spin: 10
            
            batch_normalization: false
            dropout_rate: 0.1
            validation_period: 10

        network:
            image_subnet:
                n_layers: 3
                n_filters: [16, 8, 4]
                filter_sizes: [5, 5, 5]
                conv_strides: 1
                pool_sizes: [4, 5, 5]
                pool_strides: [2, 3, 3]
            vector_subnet:
                n_layers: 3
                n_units: 8
                n_outputs: 4
                final_rect: relu
            final_subnet:
                n_layers: 3
                n_units: [32, 16]
                n_outputs: 2
                final_rect: tanh
    </rosparam>
</node>

</launch>