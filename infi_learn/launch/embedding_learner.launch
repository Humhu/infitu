<launch>

<arg name="replay" default="false"/>
<arg name="replay_path" default=""/>

<param name="/use_sim_time" value="true" if="$(arg replay)"/>
<node pkg="rosbag" type="play" name="player" 
 args="$(arg replay_path) --clock --delay=3"/>

<node pkg="image_view" type="image_view" name="viewer">
    <remap from="image" to="feature_image"/>
</node>

<node pkg="infi_learn" type="embedding_learner.py" name="embedding" output="screen"
clear_params="true">
    <remap from="reward" to="ape/reward"/>
    <remap from="action" to="lo_interface/normalized_parameters"/>
    <!-- <remap from="breaks" to="terminator/breaks"/> -->
    <rosparam>
        embedding_spin_rate: 1.0
        classifier_spin_rate: 0.1
        plot_rate: 1.0
        
        sources:
            dt_tol: 0.1
            image:
                image_mode: gray
                topic: feature_image

            <!-- belief:
                topic: belief_state/stream_raw -->

        sars_frontend:
            sync_time_tolerance: 0.1
            dt: 3.0
            gamma: 1.0
            lag: 1.0

        embedding:
            learning:
                holdout:
                    rate: 0.05
                    mode: uniform
                    <!-- segment_length: 30 -->

                loss:
                    separation_distance: 4.0

                batch_size: 10
                iters_per_spin: 100
                validation_period: 10

            network:
                use_batch_norm: false
                dropout_rate: 0.0
                image_subnet:
                    n_layers: 3
                    n_filters: [8, 8, 8]
                    filter_sizes: [3, 5, 7]
                    conv_strides: 1
                    pool_sizes: [3, 3, 3]
                    pool_strides: [2, 2, 2]
                <!-- squeeze_subnet:
                    n_layers: 2
                    n_units: [64]
                    n_outputs: 16
                    final_rect: relu
                vector_subnet:
                    n_layers: 3
                    n_units: [16, 16]
                    n_outputs: 16
                    final_rect: relu -->
                final_subnet:
                    n_layers: 3
                    n_units: [256, 64]
                    n_outputs: 2
                    final_rect: tanh

        classification:
            visualize: true
            vis_res: 30
            min_value: 4.5

            classifier:
                bandwidth: [1.0, 1.0]
                epsilon: 1e-3
            
            holdout:
                rate: 0.1
                mode: uniform

            optimizer:
                type: bfgs
                mode: min
                <!-- maxfevals: 1000 -->
                num_restarts: 3
                lower_bounds: [-10, -1, -3, -3]
                upper_bounds: [0, 3, 1, 1]
    </rosparam>
</node>

</launch>